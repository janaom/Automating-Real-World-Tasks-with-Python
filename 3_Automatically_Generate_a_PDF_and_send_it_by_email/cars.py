#!/usr/bin/env python3ta, looking for maximums.
import json
import localeist of lines that summarize the information.
import sys
from reports import generate as report
from emails import generate as email_generate
from emails import send as email_send
    best_car = {}
def load_data(filename):
    """Loads the contents of filename as a JSON file."""(price * total_sales)
    with open(filename) as json_file:e from "$1234.56" to 1234.56
        new_data = json.load(json_file)price"].strip("$"))
        data = sorted(new_data, key=lambda i: i['total_sales'])
    return data_revenue > max_revenue["revenue"]:
            item["revenue"] = item_revenue
def format_car(car):nue = item
    """Given a car dictionary, returns a nicely formatted name."""
    return "{} {} ({})".format(> sales["total_sales"]:
        car["car_make"], car["car_model"], car["car_year"])
        # TODO: also handle most popular car_year
def process_data(data):r"]["car_year"] in best_car.keys():
    """Analyzes the data, looking for maximums. item["total_sales"]
        else:
  Returns a list of lines that summarize the information.tal_sales"]
  """
        all_values = best_car.values()
    max_revenue = {"revenue": 0}es)
    sales = {"total_sales": 0}, key=best_car.get)
    best_car = {}
    for item in data:
        # Calculate the revenue generated by this model (price * total_sales)
        # We need to convert the price from "$1234.56" to 1234.56]),
        item_price = locale.atof(item["price"].strip("$"))]["car_model"], sales["total_sales"]),
        item_revenue = item["total_sales"] * item_priceormat(max_key, max_value),
        if item_revenue > max_revenue["revenue"]:
            item["revenue"] = item_revenue
            max_revenue = item
        # TODO: also handle max sales
        if item["total_sales"] > sales["total_sales"]:
            sales = item car_data into a list of lists."""
        # TODO: also handle most popular car_yearales"]]
        if not item["car"]["car_year"] in best_car.keys():
            best_car[item["car"]["car_year"]] = item["total_sales"]m["price"], item["total_sales"]])
        else:ble_data
            best_car[item["car"]["car_year"]] += item["total_sales"]
def main(argv):
        all_values = best_car.values()ate a full report out of it."""
        max_value = max(all_values)-01-f4c9f26da5ac/car_sales.json")
        max_key = max(best_car, key=best_car.get)
    new_summary = ''.join(summary)
    summary = [ry)
        "The {} generated the most revenue: ${}".format(
            format_car(max_revenue["car"]), max_revenue["revenue"]),_table(data))
        "The {} had the most sales: {}".format(sales["car"]["car_model"], sales["total_sales"]),
        "The most popular year was {} with {} sales.".format(max_key, max_value),le.com",
    ]                    "Sales summary for last month", new_summary, "/tmp/cars.pdf")
    email_send(msg)
    return summary
if __name__ == "__main__":
def cars_dict_to_table(car_data):
    """Turns the data in car_data into a list of lists."""
    table_data = [["ID", "Car", "Price", "Total Sales"]]
    for item in car_data:inux-instance:~/scripts$
        table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
    return table_data

def main(argv):
    """Process the JSON data and generate a full report out of it."""
    data = load_data("/home/student-01-f4c9f26da5ac/car_sales.json")
    summary = process_data(data)
    new_summary = ''.join(summary)
    print(summary)
    # TODO: turn this into a PDF report
    report('/tmp/cars.pdf', "Cars report", new_summary, cars_dict_to_table(data))
    # TODO: send the PDF report as an email attachment
    msg = email_generate("automation@example.com", "student-01-f4c9f26da5ac@example.com",
                         "Sales summary for last month", new_summary, "/tmp/cars.pdf")
    email_send(msg)

if __name__ == "__main__":
    main(sys.argv)
